apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: new-nodejs-existing-repo
  title: New Node.js in existing repo
  description: Create directory for new NodeJS service in existing repo
spec:
  owner: backstage/techdocs-core
  type: service

  parameters:
    - title: Fill in some steps
      required:
        - name
      properties:
        name:
          title: Name
          type: string
          description: Unique name of the component
          ui:field: EntityNamePicker
          ui:autofocus: true
        description:
          title: Description
          type: string
          description: Description of the component
        # targetPath:
        #   title: Target Path in repo
        #   type: string
        #   description: Name of the directory to create in the repository. Don't include the root slash.
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com

  steps:
    - id: fetch-base-code
      name: Fetch Base Code
      action: fetch:template
      input:
        url: ./base-code
        targetPath: my-app/${{parameters.name}}
        values:
          name: ${{parameters.name}}

    - id: fetch-helm-chart
      name: Fetch Helm Chart
      action: fetch:template
      input:
        url: ./helm-chart
        targetPath: helm/my-app/${{parameters.name}}
        values:
          name: ${{parameters.name}}

    - id: fetch-argocd-application-manifest
      name: Fetch ArgoCD Application Manifest
      action: fetch:template
      input:
        url: ./argocd-applications
        targetPath: argocd/applications/my-app/${{parameters.name}}
        values:
          name: ${{parameters.name}}

    # - id: fetch-docs
    #   name: Fetch Docs
    #   action: fetch:plain
    #   input:
    #     targetPath: ./${{parameters.name}}
    #     url: https://github.com/tomasferrarisenda/backstage/tree/main/templates/new-nodejs-in-existing-repo/content

    - id: publish
      name: Publish
      action: publish:github:pull-request
      input:
        allowedHosts: ['github.com']
        repoUrl: ${{ parameters.repoUrl }}
        title: "Create new project: ${{parameters.name}}"
        branchName: create-${{parameters.name}}
        description: |
          # New project: ${{parameters.name}}

          ${{ parameters.description if parameters.description }}
        # targetPath: my-app/${{parameters.name}}
        # targetPath: ${{ parameters.targetPath if parameters.targetPath else parameters.name }}
        targetPath: "" # Leave empty to use the root of the repo or specify if needed
        paths: 
          - my-app/${{parameters.name}}
          - helm/my-app/${{parameters.name}}
          - argocd/applications/my-app/${{parameters.name}}

    # - id: publish-helm
    #   name: Publish Helm
    #   action: publish:github:pull-request
    #   input:
    #     allowedHosts: ['github.com']
    #     repoUrl: ${{ parameters.repoUrl }}
    #     title: "Create new project: ${{parameters.name}}"
    #     branchName: create-${{parameters.name}}
    #     description: "New project: ${{parameters.name}}"
    #     targetPath: helm/my-app/${{parameters.name}}

    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: https://github.com/tomasferrarisenda/backstage/tree/create-${{parameters.name}}
        # repoContentsUrl: ${{ parameters.repoUrl }}
        # repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: 'my-app/${{parameters.name}}/catalog-info.yaml'

  output:
    links:
      - url: ${{steps.publish.output.remoteUrl}}
        title: "Go to PR"

      - title: Repository
        url: ${{ steps['publish'].output.remoteUrl }}

      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
