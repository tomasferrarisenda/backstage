apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: new-nodejs-in-existing-repo
  title: New Node.js in Existing Repo
  description: Create directory for new NodeJS service in existing repo
  tags:
    - nodejs
spec:
  owner: web@example.com
  type: service
  parameters:
    - title: Provide some simple information
      required:
        - system
        - service
        - description
        - owner
      properties:
        system:
          title: System
          type: string
          description: Name of the system the new service belongs to
          ui:field: EntityNamePicker
          ui:autofocus: true
        service:
          title: Name
          type: string
          description: Unique name of the new service
          ui:field: EntityNamePicker
          ui:autofocus: true
        description:
          title: Description
          type: string
          description: Help others understand what this service is for
        owner:
          title: Owner
          type: string
          description: Owner of the service
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
        # tags:
        #   type: array
        #   title: Tags
        #   description: Tags to categorize the service
        #   items:
        #     type: string
        # targetPath:
        #   title: Target Path in repo
        #   type: string
        #   description: Name of the directory to create in the repository. Don't include the root slash.

    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - github.com
            # placeholder: "https://github.com/tomasferrarisenda/backstage"

  steps:
    - id: fetch-base-code
      name: Fetch Base Code
      action: fetch:template
      input:
        url: ./base-code
        targetPath: ${{ parameters.system }}/${{ parameters.service }}
        values:
          system: ${{ parameters.system }}
          service: ${{ parameters.service }}
          description: ${{ parameters.description }}
          owner: ${{ parameters.owner }}
          # tags: ['nodejs', 'example-tag2', 'example-tag3']
          # tags:
          #   - hard-coded-tag1
          #   - hard-coded-tag2


    - id: fetch-helm-chart
      name: Fetch Helm Chart
      action: fetch:template
      input:
        url: ./helm-chart
        targetPath: helm/${{ parameters.system }}/${{ parameters.service }}
        values:
          service: ${{ parameters.service }}

    - id: fetch-argocd-application-manifest
      name: Fetch ArgoCD Application Manifest
      action: fetch:template
      input:
        url: ./argocd-applications
        targetPath: argocd/applications/${{ parameters.system }}/${{ parameters.service }}
        values:
          service: ${{ parameters.service }}

    - id: fetch-github-workflow
      name: Fetch GitHub workflow
      action: fetch:template
      input:
        url: ./github-workflows
        targetPath: .github/workflows
        values:
          service: ${{ parameters.service }}

    - id: publish
      name: Publish
      action: publish:github:pull-request
      input:
        allowedHosts: ['github.com']
        repoUrl: ${{ parameters.repoUrl }}
        title: "Create new project: ${{parameters.service}}"
        branchName: create-${{parameters.service}}
        description: |
          # New project: ${{parameters.service}}

          ${{ parameters.description if parameters.description }}
        targetPath: "" # Leave empty to use the root of the repo or specify if needed
        paths: 
          - my-app/${{parameters.service}}
          - helm/my-app/${{parameters.service}}
          - argocd/applications/my-app/${{parameters.service}}
          - azure-devops

    # ESTO NO FUNCIONA!
    # - id: log-publish-output
    #   name: Log Publish Output
    #   action: shell
    #   input:
    #     script: echo "Publish Step Output: ${{ steps.publish.output }}"


    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: https://github.com/tomasferrarisenda/backstage
        # repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }} # Invalid input passed to action catalog:register, instance is not exactly one from [subschema 0],[subschema 1]
        # repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }} # Invalid input passed to action catalog:register, instance is not exactly one from [subschema 0],[subschema 1]
        # repoContentsUrl: ${{ steps.publish[0].output.repoContentsUrl }} # Invalid input passed to action catalog:register, instance is not exactly one from [subschema 0],[subschema 1]
                        #  https://github.com/tomasferrarisenda/backstage/blob/create-backend-2/my-app/backend-2/catalog-info.yaml
                        #  https://github.com/tomasferrarisenda/backstage/tree/create-backend-2/catalog-info.yaml
                        #  https://github.com/tomasferrarisenda/backstage/tree/create-backend-2/my-app/backend-2/my-app/backend-2/catalog-info.yaml
        # repoContentsUrl: https://github.com/tomasferrarisenda/backstage/blob/create-${{parameters.service}}
        # repoContentsUrl: https://github.com/tomasferrarisenda/backstage/tree/create-${{parameters.service}}
        # repoContentsUrl: ${{ parameters.repoUrl }}
        # repoContentsUrl: "tomasferrarisenda/${{ parameters.repoUrl }}"
        # repoContentsUrl: tomasferrarisenda/backstage
        # repoContentsUrl: https://raw.githubusercontent.com/tomasferrarisenda/backstage/create-backend-2/my-app/backend-2/catalog-info.yaml
        catalogInfoPath: backstage/blob/create-${{parameters.service}}/my-app/${{parameters.service}}/catalog-info.yaml
        # catalogInfoPath: create-backend-2/my-app/${{parameters.service}}/catalog-info.yaml
        # catalogInfoPath: /catalog-info.yaml
        
  output:
    links:
      - url: ${{steps.publish.output.remoteUrl}}
        title: "Go to PR"
      # - title: Repository
      #   url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}


