parameters:
  - name: SERVICE_NAME
  - name: USER_EMAIL

stages:
- stage: DeployProd
  condition: succeeded()
  # dependsOn: DeployStage
  jobs:
  - job: ApproveRelease
    timeoutInMinutes: 4320 # Job times out in 3 days
    pool: server
    steps:
    - task: ManualValidation@0
      timeoutInMinutes: 1440 # Task times out in 1 day
      inputs:
        notifyUsers: ${{ parameters.USER_EMAIL }}
        instructions: 'Please validate and approve deployment to prod.'

  - job: DeployProdJob
    dependsOn: ApproveRelease
    steps:

    # In this case it's necessary to specify the checkout with the persistCredential options set to true. This will enable us to push the changes to the repo.
    - checkout: self
      persistCredentials: true
      #clean: true
      
    # Every time the pipeline performs a "checkout" step it will checkout the same commit, so we need this step to pull for the changes commited in the previous stage   
    - script: |
        git pull origin main
      displayName: Update repo

    - script: |
        sed 's/tag:.*/tag: $(Build.BuildId)/g' helm/my-app/${{ parameters.SERVICE_NAME }}/environments/values-prod.yaml > helm/my-app/${{ parameters.SERVICE_NAME }}/environments/values-prod.temp
        mv helm/my-app/${{ parameters.SERVICE_NAME }}/environments/values-prod.temp helm/my-app/${{ parameters.SERVICE_NAME }}/environments/values-prod.yaml
      displayName: Update Tag In values-prod.yaml

    - script: |
        git config --global user.email "AzureDevOps@Build&DeployAppPipeline.com"
        git config --global user.name "Azure DevOps - Build & Deploy App Pipeline"
        git checkout -b main
        git add helm/my-app/${{ parameters.SERVICE_NAME }}/environments/values-prod.yaml 
        git commit -m "App version tag updated to $(Build.BuildId) by Azure DevOps"
        git push --set-upstream origin main
      displayName: 'Push changes to GitHub'